@using HexoArticleEditor.Model
@inherits LayoutComponentBase
@inject SessionStorageProvider _authProvider
@inject IDialogService Dialog
@inject IJSRuntime JS

<MudThemeProvider Theme="@Theme" IsDarkMode="DarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
        <MudAppBar Elevation="1" Color="Color.Primary">
            <AuthorizeView>
                <MudMenu Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                    <MudMenuItem OnClick="@(() => Common.InvokeArticleListClicked())">文章列表</MudMenuItem>
                    <MudMenuItem OnClick="@(() => Common.InvokeTerminalClicked())">终端</MudMenuItem>
                    <MudMenuItem OnClick="ShowSettingDialog">设置</MudMenuItem>
                </MudMenu>
            </AuthorizeView>
            <MudText Typo="Typo.h5" Class="ml-3">HexoAritcleEditor</MudText>
            <MudSpacer />
            <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />
            <AuthorizeView>
                <MudIconButton Color="Color.Secondary" Icon="@Icons.Material.Filled.ExitToApp" OnClick="Logout" />
            </AuthorizeView>
        </MudAppBar>
    <MudMainContent Class="mt-16 pa-4" Style="height: calc(100vh - 70px)">
        @Body
    </MudMainContent>
</MudLayout>
<Settings @ref="SettingDialog" />

<div id="blazor-error-ui">
    异常发生，需要刷新页面.
    <a href="" class="reload">刷新</a>
    <a class="dismiss">🗙</a>
</div>
@code {
    private bool DrawerOpen { get; set; } = true;

    private bool DarkMode { get; set; } = true;

    private MudTheme? Theme { get; set; } = null;

    private Settings SettingDialog { get; set; } = new();

    private PaletteLight LightPalette { get; set; } = new()
    {
        Black = "#110e2d",
        AppbarText = "#424242",
        AppbarBackground = "rgba(255,255,255,0.8)",
        DrawerBackground = "#ffffff",
        GrayLight = "#e8e8e8",
        GrayLighter = "#f9f9f9",
    };

    private PaletteDark DarkPalette { get; set; } = new()
    {
        Primary = "#7e6fff",
        Surface = "#1e1e2d",
        Background = "#1a1a27",
        BackgroundGray = "#151521",
        AppbarText = "#92929f",
        AppbarBackground = "rgba(26,26,39,0.8)",
        DrawerBackground = "#1a1a27",
        ActionDefault = "#74718e",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d4d",
        TextPrimary = "#b2b0bf",
        TextSecondary = "#92929f",
        TextDisabled = "#ffffff33",
        DrawerIcon = "#92929f",
        DrawerText = "#92929f",
        GrayLight = "#2a2833",
        GrayLighter = "#1e1e2d",
        Info = "#4a86ff",
        Success = "#3dcb6c",
        Warning = "#ffb545",
        Error = "#ff3f5f",
        LinesDefault = "#33323e",
        TableLines = "#33323e",
        Divider = "#292838",
        OverlayLight = "#1e1e2d80",
    };

    private string DarkLightModeButtonIcon => DarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Theme = new()
        {
            PaletteLight = LightPalette,
            PaletteDark = DarkPalette,
            LayoutProperties = new LayoutProperties()
        };
    }

    private void DrawerToggle()
    {
        DrawerOpen = !DrawerOpen;
    }

    private void DarkModeToggle()
    {
        DarkMode = !DarkMode;
        Common.InvokeDarkModeChanged(DarkMode);
    }

    private async void Logout()
    {
        bool? result = await Dialog.ShowMessageBox("嗯？", "要登出了吗？", "嗯", cancelText: "不是", options: new DialogOptions { FullWidth = true });
        if (result != null && result.Value)
        {
            await _authProvider.UpdateSignInStatusAsync(null);
            await JS.InvokeVoidAsync("savePassword", "");
        }
    }

    private async void ShowSettingDialog()
    {
        await SettingDialog.Show();
    }
}