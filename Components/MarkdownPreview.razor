@inject IJSRuntime JS

<iframe id="preview-iframe" style="">

</iframe>

<script>
    var template = `<!DOCTYPE html>
<html>
<head>
    {css}
    <script src="highlight.min.js"><\/script>
    <meta charset='utf-8'>
</head>
<article class="markdown-body">
    {markdown}
</article>
<script>hljs.highlightAll();<\/script>
<style>
.markdown-body {
	box-sizing: border-box;
	margin: 0 auto;
	padding: 16px;
}
</style>
</html>`

    function updatePreview() {
        if (!editorLoaded) {
            return
        }
        const css = darkMode
            ? "<link rel=\"stylesheet\" href=\"github-dark.min.css\"> <link rel=\"stylesheet\" href=\"github-markdown-dark.min.css\">"
            : "<link rel=\"stylesheet\" href=\"github.min.css\"> <link rel=\"stylesheet\" href=\"github-markdown-light.min.css\">";
        let content = marked.parse(template.replace('{css}', css).replace('{markdown}', getModelValue()))
        console.log('preview Invoked')
        const previewIframe = document.getElementById('preview-iframe');
        const iframeDoc = previewIframe.contentDocument || previewIframe.contentWindow.document;
        if (iframeDoc) {
            iframeDoc.open();
            iframeDoc.write(content);
            iframeDoc.close();
        }
    }
</script>

@code {
    public bool Loaded{ get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Loaded = true;
            await JS.InvokeVoidAsync("updatePreview");
        }
    }

    public async Task ReloadFrame()
    {
        if (Loaded)
        {
            await JS.InvokeVoidAsync("updatePreview");
        }
    }
}
