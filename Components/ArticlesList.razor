@using HexoArticleEditor.Model
@inject IDialogService DialogService
@inject ISnackbar SnackBar

<div style="display: flex;">
    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="NewArticle">新建</MudButton>
    <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="SaveAllArticles">保存全部</MudButton>
    <MudSpacer />
    <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Close" OnClick="@(() => Common.InvokeArticleListClicked())"></MudIconButton>
</div>
<MudTextField T="string" Label="搜点什么？" Text="@Search" TextChanged="OnSearchChanged" Variant="Variant.Outlined" Clearable Margin="Margin.Dense"></MudTextField>
<MudList Disabled="Loading" T="Article" SelectedValues="SelectedValues" SelectedValue="CurrentArticle" Dense="true" SelectionMode="@(MultiSelect ? SelectionMode.MultiSelection: SelectionMode.SingleSelection)" CheckBoxColor="Color.Primary" SelectedValueChanged="OnSelectedArticleChanged" SelectedValuesChanged="OnSelectedArticlesChanged">
    <MudListSubheader>
        <div style="display: flex; align-items: center;">
            <MudSwitch T="bool" Value="MultiSelect" Color="Color.Primary" ValueChanged="OnMultiSelectChanged">多选</MudSwitch>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Secondary" OnClick="LoadArticleList"></MudIconButton>
        </div>
    </MudListSubheader>
    @if (Loading)
    {
        <div style="display: flex; justify-content: center; align-items: stretch;">
            <MudProgressCircular Color="Color.Secondary" Indeterminate="true" Size="Size.Small" />
            <MudText style="margin-left: 10px; margin-bottom: 10px;">正在拉取文章列表...</MudText>
        </div>
    }
    @foreach (var item in DisplayArticles)
    {
        <MudListItem Value="item">
            <div style="display: flex;">
                <MudIcon Icon="@Icons.Material.Filled.Article" Color="@(SelectedValues.Contains(item) ? Color.Primary : Color.Default)" Style="margin-right: 10px;" />
                <MudText>@item.Name</MudText>
                <MudSpacer />
                <div style="display: flex; flex-direction: row; justify-content: center; margin-left: 10px; align-items: baseline;">
                    @if (!item.Saved)
                    {
                        <MudTooltip Text="未保存"><MudIcon Icon="@Icons.Material.Filled.Circle" Color="Color.Warning" Size="Size.Small" /></MudTooltip>
                    }
                    @if (SelectedValues.Contains(item) && !MultiSelect)
                    {
                        <MudTooltip Text="菜单">
                            <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small" Color="Color.Default" Style="margin-left: 5px;">
                                <MudMenuItem OnClick="@(() => RevertAutoSaveClicked(item))">回滚自动保存</MudMenuItem>
                                <MudMenuItem OnClick="@(() => DiscardEditContent(item))">放弃当前更改</MudMenuItem>
                            </MudMenu>
                        </MudTooltip>
                    }
                </div>
            </div>
        </MudListItem>
    }
</MudList>
@if (MultiSelect)
{
    <div style="margin-top: 16px; display: flex; position: sticky; bottom: 0; background-color: var(--mud-palette-drawer-background); z-index: 999;">
        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="SelectAllArticles">全选</MudButton>
        <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="InvertSelectArticles">反选</MudButton>
        <MudSpacer />
        <MudButton Variant="Variant.Text" Color="Color.Tertiary" OnClick="HideArticles">隐藏</MudButton>
        <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="DeleteArticles">删除</MudButton>
    </div>
}

@code {
    [Parameter]
    public EventCallback<AutoSaveItem> OnRevertAutoSave { get; set; }

    [Parameter]
    public EventCallback<Article> OnDiscardEditContent { get; set; }

    [Parameter]
    public EventCallback<Article> OnCurrentArticleChanged { get; set; }

    [Parameter]
    public EventCallback<List<Article>> OnHideArticles { get; set; }

    [Parameter]
    public EventCallback<List<Article>> OnDeleteArticles { get; set; }

    [Parameter]
    public EventCallback<Article> OnCreateNewArticle { get; set; }

    [Parameter]
    public EventCallback<List<Article>> OnSaveArticles { get; set; }

    private List<Article> SelectedValues { get; set; } = [];

    private Article CurrentArticle { get; set; } = new();

    private string Search { get; set; } = "";

    private List<Article> Articles { get; set; } = [];

    private List<Article> DisplayArticles { get; set; } = [];

    private bool MultiSelect { get; set; }

    private bool Loading { get; set; } = true;

    private Debouncer Debouncer { get; set; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadArticleList();
            StateHasChanged();
        }
    }

    public async Task LoadArticleList()
    {
        Loading = true;
        List<Article> articles = [];
        await Task.Delay(1000);
        await Task.Run(() =>
        {
            foreach (var item in Directory.GetFiles(AppConfig.HexoArticlePath, "*.md"))
            {
                var article = new Article { Name = Path.GetFileNameWithoutExtension(item), FilePath = item };
                articles.Add(article);
                var a = Articles.FirstOrDefault(x => x.Name == article.Name);
                if(a != null && !string.IsNullOrEmpty(article.Name))
                {
                    article.Saved = a.Saved;
                }
            }
            articles = articles.OrderBy(x => x.Name).ToList();
            Articles = articles;
        });
        RefilterArticles();
        Loading = false;
        StateHasChanged();
    }

    public void OnArticleSaveStateChanged(Article article, bool saveState)
    {
        article.Saved = saveState;
        StateHasChanged();
    }

    private void RefilterArticles()
    {
        DisplayArticles = Articles.Where(x => x.Name.ToLower().Contains(Search)).ToList();
        InvokeAsync(() => StateHasChanged());
    }

    private void OnMultiSelectChanged(bool enabled)
    {
        MultiSelect = enabled;
        SelectedValues = [CurrentArticle];
        StateHasChanged();
    }

    private void OnSelectedArticlesChanged(IReadOnlyCollection<Article> selectedList)
    {
        SelectedValues = selectedList.Where(x => !string.IsNullOrEmpty(x.Name)).ToList();
        StateHasChanged();
    }

    private void OnSelectedArticleChanged(Article selected)
    {
        SelectedValues = [selected];
        CurrentArticle = selected;
        StateHasChanged();
        OnCurrentArticleChanged.InvokeAsync(selected);
    }

    private void OnSearchChanged(string search)
    {
        Search = search.ToLower();
        RefilterArticles();
    }

    private async Task RevertAutoSaveClicked(Article article)
    {
        var result = await DialogService.ShowAsync<RevertAutoSaveDialog>("请选择要回滚的自动保存时间点", parameters: new DialogParameters<RevertAutoSaveDialog>
        {
            { x => x.CurrentArticle, article }
        }, new DialogOptions
        { 
            FullWidth = true 
        });
        if ((await result.Result)?.Data is AutoSaveItem autoSaveItem)
        {
            await OnRevertAutoSave.InvokeAsync(autoSaveItem);
        }
    }

    private async Task DiscardEditContent(Article article)
    {
        var result = await DialogService.ShowMessageBox(new MessageBoxOptions
        {
            Title = "抛弃当前编辑内容",
            Message = "确定要这么做吗？点击确定后将会重新读取原始文件",
            YesText = "确定",
            CancelText = "取消"
        }, new DialogOptions
        {
            FullWidth = true
        });
        if (result.GetValueOrDefault(false))
        {
            await OnDiscardEditContent.InvokeAsync(article);
            if (article.NewArticle)
            {
                Articles.Remove(article);
                RefilterArticles();
                CurrentArticle = new();
                StateHasChanged();
            }
        }
    }

    private void SelectAllArticles()
    {
        if ((SelectedValues.Count == Articles.Count)
            || (DisplayArticles.Count != Articles.Count && SelectedValues.Count == DisplayArticles.Count))
        {
            SelectedValues = [];
        }
        else
        {
            SelectedValues = DisplayArticles.ToList();
        }
        StateHasChanged();
    }

    private void InvertSelectArticles()
    {
        SelectedValues = DisplayArticles.Where(x => !SelectedValues.Contains(x)).ToList();
        StateHasChanged();
    }

    private async void HideArticles()
    {
        var result = await DialogService.ShowMessageBox(new MessageBoxOptions
        {
            Title = "隐藏文章",
            Message = $"共选中了 {SelectedValues.Count} 篇文章，确定要隐藏吗？点击确定后文件被移动至hide文件夹中，取回需要手动操作",
            YesText = "确定",
            CancelText = "取消"
        }, new DialogOptions
        {
            FullWidth = true
        });
        if (result.GetValueOrDefault(false))
        {
            await OnHideArticles.InvokeAsync(SelectedValues);
        }
        if (SelectedValues.Contains(CurrentArticle))
        {
            CurrentArticle = new();
        }
        SelectedValues = [];
    }

    private async void DeleteArticles()
    {
        var result = await DialogService.ShowMessageBox(new MessageBoxOptions
        {
            Title = "删除文章",
            Message = $"共选中了 {SelectedValues.Count} 篇文章，确定要删除吗？点击确定后文件将会从硬盘中删除",
            YesText = "确定",
            CancelText = "取消"
        }, new DialogOptions
        {
            FullWidth = true
        });
        if (result.GetValueOrDefault(false))
        {
            await OnDeleteArticles.InvokeAsync(SelectedValues);
            MultiSelect = false;
        }
        if (SelectedValues.Contains(CurrentArticle))
        {
            CurrentArticle = new();
        }
        SelectedValues = [];
    }

    private async void NewArticle()
    {
        var newArticle = new Article
        {
            FilePath = Path.Combine(AppConfig.HexoArticlePath, "new.md"),
            MetaData = new MetaData(),
            Name = $"新文章{Articles.Count(x => x.Name.StartsWith("新文章")) + 1}",
            Saved = false,
            NewArticle = true
        };
        Articles.Insert(0, newArticle);
        RefilterArticles();

        MultiSelect = false;
        CurrentArticle = newArticle;
        SelectedValues = [CurrentArticle];

        await OnCreateNewArticle.InvokeAsync(newArticle);
    }

    private async void SaveAllArticles()
    {
        await OnSaveArticles.InvokeAsync(Articles.Where(x => x.Saved is false).ToList());
    }
}
