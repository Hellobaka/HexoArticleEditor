@using MudBlazor.Services
@page "/"
@inject IJSRuntime JS
@inject IBrowserViewportService BrowserViewportService
@implements IAsyncDisposable
@implements IBrowserViewportObserver

<PageTitle>Home</PageTitle>
<link rel="stylesheet" data-name="vs/editor/editor.main" href="vs/editor/editor.main.css">
<link href="MaterialSymbol.css" rel="stylesheet" />
<script src="marked.min.js"></script>
<script src="vs/loader.js"></script>

<h1>monaco editor</h1>
<MudButton OnClick="@GetModelValue">Get</MudButton>
<MudButton OnClick="@SetModelValue">Set</MudButton>

<MudGrid>
    <MudItem sm="12" md="6">
        <div style="position: relative; resize: vertical; overflow: auto; min-width: 580px; min-height: 300px; border-radius: 5px;">
            <MudPaper Elevation="20">
                <MudToolBar>
                    <MudTooltip Text="一级标题"><MudIconButton OnClick="@((e) => ToolAction("h1"))" Icon="@MudBlazor.FontIcons.MaterialSymbols.Rounded.FormatH1" Color="Color.Inherit" /></MudTooltip>
                    <MudTooltip Text="二级标题"><MudIconButton OnClick="@((e) => ToolAction("h2"))" Icon="@MudBlazor.FontIcons.MaterialSymbols.Rounded.FormatH2" Color="Color.Inherit" /></MudTooltip>
                    <MudTooltip Text="粗体"><MudIconButton OnClick="@((e) => ToolAction("bold"))" Icon="@MudBlazor.FontIcons.MaterialSymbols.Rounded.FormatBold" Color="Color.Inherit" /></MudTooltip>
                    <MudTooltip Text="斜体"><MudIconButton OnClick="@((e) => ToolAction("italic"))" Icon="@MudBlazor.FontIcons.MaterialSymbols.Rounded.FormatItalic" Color="Color.Inherit" /></MudTooltip>
                    <MudTooltip Text="引用"><MudIconButton OnClick="@((e) => ToolAction("quote"))" Icon="@MudBlazor.FontIcons.MaterialSymbols.Rounded.FormatQuote" Color="Color.Inherit" /></MudTooltip>
                    <MudTooltip Text="删除线"><MudIconButton OnClick="@((e) => ToolAction("deleteLine"))" Icon="@MudBlazor.FontIcons.MaterialSymbols.Rounded.FormatStrikethrough" Color="Color.Inherit" /></MudTooltip>
                    <MudTooltip Text="代码块"><MudIconButton OnClick="@((e) => ToolAction("code"))" Icon="@MudBlazor.FontIcons.MaterialSymbols.Rounded.CodeBlocks" Color="Color.Inherit" /></MudTooltip>
                    <div class="divider" />
                    <MudTooltip Text="图片"><MudIconButton OnClick="@((e) => ToolAction("image"))" Icon="@MudBlazor.FontIcons.MaterialSymbols.Rounded.Imagesmode" Color="Color.Inherit" /></MudTooltip>
                    <MudTooltip Text="链接"><MudIconButton OnClick="@((e) => ToolAction("link"))" Icon="@MudBlazor.FontIcons.MaterialSymbols.Rounded.Link" Color="Color.Inherit" /></MudTooltip>
                    <div class="divider" />
                    <MudTooltip Text="无序列表"><MudIconButton OnClick="@((e) => ToolAction("ul"))" Icon="@MudBlazor.FontIcons.MaterialSymbols.Rounded.FormatListBulleted" Color="Color.Inherit" /></MudTooltip>
                    <MudTooltip Text="有序列表"><MudIconButton OnClick="@((e) => ToolAction("ol"))" Icon="@MudBlazor.FontIcons.MaterialSymbols.Rounded.FormatListNumbered" Color="Color.Inherit" /></MudTooltip>
                    @if (!ShowPreview)
                    {
                        <MudSpacer />
                        <MudTooltip Text="预览"><MudIconButton OnClick="PreviewShowAndRefresh" Icon="@MudBlazor.FontIcons.MaterialSymbols.Rounded.Preview" Color="Color.Primary" /></MudTooltip>
                    }
                </MudToolBar>
            </MudPaper>
            <div id="monaco_editor" style="height: calc(100% - 104px); min-height: 600px;" />
            <MudPaper Elevation="20" Style="position: sticky; bottom: 0; right: 16px; left: 0;">
                <MudToolBar Style="height: 40px;">
                    <MudText id="wordCount">字数：0</MudText>
                    <div class="divider" style="margin: 0 10px;" />
                    <MudText id="selectionCount">选中：0</MudText>
                    <div class="divider" style="margin: 0 10px;" />
                    <MudText id="status"></MudText>
                    <MudSpacer></MudSpacer>
                    <MudText id="cursorPosition">行：0, 列：0</MudText>
                    <div class="divider" style="margin: 0 10px;" />
                    <MudMenu Label="@TabStopDisplay">
                        <MudMenuItem OnClick="() => TabStopChanged(true, 1)">制表符：1</MudMenuItem>
                        <MudMenuItem OnClick="() => TabStopChanged(true, 2)">制表符：2</MudMenuItem>
                        <MudMenuItem OnClick="() => TabStopChanged(false, 1)">空格：1</MudMenuItem>
                        <MudMenuItem OnClick="() => TabStopChanged(false, 2)">空格：2</MudMenuItem>
                        <MudMenuItem OnClick="() => TabStopChanged(false, 4)">空格：4</MudMenuItem>
                    </MudMenu>
                </MudToolBar>
            </MudPaper>
        </div>
    </MudItem>
    @if (ShowPreview)
    {
        <MudItem sm="12" md="6">
            <MarkdownPreview @ref="Preview" />
        </MudItem>
    }
    </MudGrid>
    <MudDrawer Width="80%" @bind-Open="@PreviewDrawerOpen" Anchor="@Anchor.Right" Elevation="1" Variant="@DrawerVariant.Temporary" OverlayAutoClose="true">
        <MarkdownPreview @ref="Preview" />
    </MudDrawer>

    <script>
        function debounce(func, wait) {
            let timeout;

            return function (...args) {
                const context = this;

                clearTimeout(timeout);

                timeout = setTimeout(() => {
                    func.apply(context, args);
                }, wait);
            };
        }

        require.config({ paths: { vs: 'vs' } });
        require.config({
            'vs/nls': {
                availableLanguages: {
                    '*': 'zh-cn'
                }
            }
        });
        var monacoEditor = {};
        var homePage = {}
        var editorLoaded = false

        function initEditor(blazorPageInstance) {
            homePage = blazorPageInstance

            require(['vs/editor/editor.main'], function () {
                var uri = monaco.Uri.parse('file://default.js');
                var model = monaco.editor.getModel(uri);
                if (!model)
                    model = monaco.editor.createModel('Hello world!', 'markdown', uri);

                monacoEditor = monaco.editor.create(document.getElementById('monaco_editor'), {
                    model: model,
                    theme: darkMode ? "vs-dark" : "vs-light",
                    automaticLayout: true,
                    unicodeHighlight: { ambiguousCharacters: false, },
                    fontFamily: 'Consolas, \'Courier New\', \'微软雅黑\'',
                    minimap: { enabled: false },
                    renderWhitespace: true,
                });

                const removableIds = ['editor.action.revealDefinition'
                    , 'editor.action.goToReferences'
                    , 'editor.action.quickOutline'
                    , 'submenuitem.EditorContextPeek'
                    , 'vs.actions.separator'
                    , 'editor.action.rename'
                    , 'editor.action.changeAll'
                    , 'editor.action.formatDocument'
                    , 'editor.action.quickCommand'];
                const contextmenu = monacoEditor.getContribution('editor.contrib.contextmenu');
                const realMethod = contextmenu._getMenuActions;
                contextmenu._getMenuActions = function () {
                    const items = realMethod.apply(contextmenu, arguments);

                    return items.filter(function (item) {
                        return !removableIds.includes(item.id);
                    });
                };

                monacoEditor.addAction({
                    id: 'select-all',
                    label: '全选',
                    contextMenuGroupId: 'navigation',
                    contextMenuOrder: 1.5,
                    run: function (ed) {
                        ed.setSelection(new monaco.Range(1, 1, ed.getModel().getLineCount(), ed.getModel().getLineMaxColumn(ed.getModel().getLineCount())));
                    }
                });
                monaco.editor.addKeybindingRules([
                    {
                        keybinding: monaco.KeyCode.F1,
                        command: null,
                    },
                    {
                        keybinding: monaco.KeyCode.F8,
                        command: null,
                    },
                    {
                        keybinding: monaco.KeyCode.F9,
                        command: null,
                    },
                    {
                        keybinding: monaco.KeyCode.F12,
                        command: null,
                    },
                    {
                        keybinding: monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyV,
                        command: null,
                    },
                    {
                        keybinding: monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyD,
                        command: null,
                    },
                ]);

                monacoEditor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyD, function () {
                    ExecuteListEditAction('repeat', '%%\n%%', false)
                })

                // 添加自定义粘贴操作
                monacoEditor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyV, function () {
                    navigator.clipboard.readText().then(function (text) {
                        const modifiedText = text + '123';

                        const selection = monacoEditor.getSelection();
                        monacoEditor.executeEdits("", [{
                            range: selection,
                            text: modifiedText,
                            forceMoveMarkers: true
                        }]);
                    });
                });

                let debouncedCountWords = debounce(async () => {
                    await homePage.invokeMethodAsync('NoticeMonacoEditorTextChanged');
                    updateWordCount(countWords(getModelValue()))
                }, 300)

                monacoEditor.onDidChangeModelContent((event) => {
                    debouncedCountWords()
                });

                monacoEditor.onDidChangeCursorPosition((event) => {
                    updateCursorPosition(event.position)
                });

                monacoEditor.onDidChangeCursorSelection((event) => {
                    updateSelectionCount(countWords(monacoEditor.getModel().getValueInRange(event.selection)))
                });

                updateWordCount(countWords(getModelValue()));
                editorLoaded = true
            });
        }

        function countWords(text) {
            const chineseMatches = text.match(chineseRegex) || [];
            const englishMatches = text.match(englishRegex) || [];

            return chineseMatches.length + englishMatches.length;
        }

        function changeEditorTheme(v) {
            darkMode = v;
            monacoEditor.updateOptions({
                theme: darkMode ? "vs-dark" : "vs-light"
            })
        }

        function getModelValue() {
            const result = monacoEditor.getModel().getValue();
            console.log(result.length)
            return result;
        }

        function setModelValue(value) {
            return monacoEditor.getModel().setValue(value);
        }

        function updateWordCount(count) {
            const element = document.getElementById('wordCount')
            if (element) {
                element.innerText = `字数：${count}`
            }
        }

        function updateSelectionCount(count) {
            const element = document.getElementById('selectionCount')
            if (element) {
                element.innerText = `选中：${count}`
            }
        }

        var debouncedClearStatus = debounce(() => {
            updateStatus('')
        }, 3000)

        function updateStatus(status) {
            const element = document.getElementById('status')
            if (element) {
                element.innerText = status
                debouncedClearStatus()
            }
        }

        function updateCursorPosition(pos) {
            const element = document.getElementById('cursorPosition')
            if (element) {
                element.innerText = `行：${pos.lineNumber}, 列：${pos.column}`
            }
        }

        function updateTabStop(isTab, count) {
            if (monacoEditor) {
                monacoEditor.getModel().updateOptions({
                    tabSize: count,
                    insertSpaces: !isTab
                })
            }
        }

        function EditAction(action) {
            console.log(`EditAction: ${action}`)
            switch (action){
                case 'h1':
                    ExecuteSingleLineEditAction(action, '# %%', '一级标题')
                break
                case 'h2':
                    ExecuteSingleLineEditAction(action, '## %%', '二级标题')
                break
                case 'bold':
                    ExecuteSingleLineEditAction(action, '**%%**', '粗体')
                break
                case 'italic':
                    ExecuteSingleLineEditAction(action, '*%%*', '斜体')
                break
                case 'quote':
                    ExecuteMultiLineEditAction(action, '\n> %%\n', '引用')
                break
                case 'deleteLine':
                    ExecuteSingleLineEditAction(action, '~%%~', '删除线')
                break
                case 'code':
                    ExecuteMultiLineEditAction(action, '\n```text\n%%\n```\n', '删除线')
                break
                case 'link':
                    ExecuteSingleLineEditAction(action, '[%%](URL)', '链接描述')
                    break
                case 'image':
                    ExecuteSingleLineEditAction(action, '![%%](URL)', '图片alt描述')
                    break
                case 'ul':
                    ExecuteListEditAction(action, '- %%')
                    break
                case 'ol':
                    ExecuteListEditAction(action, 'd. %%')
                    break
            }
        }

        function ExecuteSingleLineEditAction(action, format, hint) {
            if (monacoEditor) {
                const editor = monacoEditor
                const model = monacoEditor.getModel()

                const selection = editor.getSelection();
                const value = model.getValueInRange(selection)
                let targetValue = format
                if (value) {
                    hint = value
                }

                targetValue = format.replace('%%', hint)
                const hintStart = targetValue.indexOf(hint)
                const hintLength = hint.length

                editor.executeEdits(action, [{
                    range: selection,
                    text: targetValue,
                    forceMoveMarkers: true
                }]);

                const position = editor.getPosition();
                const startColumn = position.column - (targetValue.length - hintStart);
                const endColumn = startColumn + hintLength;

                const range = new monaco.Range(position.lineNumber, startColumn, position.lineNumber, endColumn);

                editor.setSelection(range);
                editor.revealRange(range);

                editor.focus()
            }
        }

        function ExecuteMultiLineEditAction(action, format, hint) {
            if (monacoEditor) {
                const editor = monacoEditor
                const model = monacoEditor.getModel()

                const selection = editor.getSelection();
                const value = model.getValueInRange(selection)
                let targetValue = format
                if (value) {
                    hint = value
                }

                targetValue = format.replace('%%', hint)
                const hintStart = targetValue.indexOf(hint)
                const hintLength = hint.length
                const lineCount = targetValue.split('\n').length
                const hintLine = targetValue.split('\n').findIndex(x => x.includes(hint)) + 1

                editor.executeEdits(action, [{
                    range: selection,
                    text: targetValue,
                    forceMoveMarkers: true
                }]);

                const position = editor.getPosition();

                const startLine = position.lineNumber - (lineCount - hintLine);
                const startColumn = model.getLineContent(startLine).indexOf(hint) + 1;
                const endColumn = startColumn + hintLength;
                const endLine = startLine;

                const range = new monaco.Range(startLine, startColumn, endLine, endColumn);

                editor.setSelection(range);
                editor.revealRange(range);

                editor.focus()
            }
        }

        function ExecuteListEditAction(action, format, afterEditSelect = true) {
            if (monacoEditor) {
                const editor = monacoEditor
                const model = monacoEditor.getModel()

                const selection = editor.getSelection();
                const startLine = selection.startLineNumber
                const endLine = selection.endLineNumber
                let maxColumn = 0
                for (let i = startLine; i <= endLine; i++) {
                    const content = format.replace('d.', `${i - startLine + 1}.`).replaceAll('%%', model.getLineContent(i))
                    editor.executeEdits(action, [{
                        range: new monaco.Range(i, 0, i, content.length),
                        text: content,
                        forceMoveMarkers: true
                    }]);
                    maxColumn = Math.max(maxColumn, content.length)
                }
                if (afterEditSelect){
                    const range = new monaco.Range(startLine, 1, endLine, maxColumn + 1);

                    editor.setSelection(range);
                    editor.revealRange(range);

                    editor.focus()
                }
            }
        }
    </script>
    <style>
        .divider {
            border: 1px solid;
            height: 50%;
            width: 2px;
            border-color: var(--mud-palette-divider);
        }

        .mud-menu > button > span {
            font-size: 1rem;
        }
    </style>
@code {
    Guid IBrowserViewportObserver.Id { get; } = Guid.NewGuid();

    ResizeOptions IBrowserViewportObserver.ResizeOptions { get; } = new()
        {
            ReportRate = 250,
            NotifyOnBreakpointOnly = true
        };

    public bool ShowPreview { get; set; } = true;

    public string TabStopDisplay { get; set; } = "空格：4";

    private MarkdownPreview Preview { get; set; }

    private bool PreviewDrawerOpen { get; set; }

    private DotNetObjectReference<Home>? PageInstance { get; set; }

    private Debouncer Debouncer { get; set; } = new();

    protected override void OnInitialized()
    {
        PageInstance = DotNetObjectReference.Create(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Common.DarkThemeChanged += DarkThemeChanged;
            await JS.InvokeVoidAsync("initEditor", PageInstance);
            await BrowserViewportService.SubscribeAsync(this, fireImmediately: true);
        }
    }

    public async ValueTask DisposeAsync()
    {
        await BrowserViewportService.UnsubscribeAsync(this);
        Common.DarkThemeChanged -= DarkThemeChanged;
    }

    public async void DarkThemeChanged(bool darkTheme)
    {
        await JS.InvokeVoidAsync("changeEditorTheme", darkTheme);
        await Preview.ReloadFrame();
    }

    public async Task<string> GetModelValue()
    {
        var str = await JS.InvokeAsync<string>("getModelValue");
        return str;
    }

    public async void SetModelValue()
    {
        await JS.InvokeVoidAsync("setModelValue", "hello world.");
    }

    public async void PreviewShowAndRefresh()
    {
        if (!ShowPreview)
        {
            PreviewDrawerOpen = true;
        }
        await Preview.ReloadFrame();
    }

    Task IBrowserViewportObserver.NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs e)
    {
        ShowPreview = e.Breakpoint switch
        {
            Breakpoint.Lg => true,
            Breakpoint.Xl => true,
            _ => false
        };
        PreviewShowAndRefresh();
        return InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public void NoticeMonacoEditorTextChanged()
    {
        Debouncer.Debounce(async () =>
        {
            await Preview.ReloadFrame();
        }, 300);
    }

    public async void TabStopChanged(bool isTab, int count)
    {
        TabStopDisplay = $"{(isTab ? "制表符" : "空格")}：{count}";
        await JS.InvokeVoidAsync("updateTabStop", isTab, count);
    }

    public async void ToolAction(string action)
    {
        await JS.InvokeVoidAsync("EditAction", action);
    }
}