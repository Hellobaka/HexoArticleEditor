@using MudBlazor.Services
@page "/"
@inject IJSRuntime JS
@inject IBrowserViewportService BrowserViewportService
@implements IAsyncDisposable
@implements IBrowserViewportObserver

<PageTitle>Home</PageTitle>
<link rel="stylesheet" data-name="vs/editor/editor.main" href="vs/editor/editor.main.css">
<link href="MaterialSymbol.css" rel="stylesheet" />
<script src="marked.min.js"></script>

<h1>monaco editor</h1>
<MudButton OnClick="@GetModelValue">Get</MudButton>
<MudButton OnClick="@SetModelValue">Set</MudButton>

<MudGrid>
    <MudItem sm="12" md="6">
        <div style="position: relative; resize: vertical; overflow: auto; min-width: 580px; min-height: 300px; border-radius: 5px;">
            <MudPaper Elevation="20">
                <MudToolBar>
                    <MudTooltip Text="一级标题"><MudIconButton Icon="@MudBlazor.FontIcons.MaterialSymbols.Rounded.FormatH1" Color="Color.Inherit" /></MudTooltip>
                    <MudTooltip Text="二级标题"><MudIconButton Icon="@MudBlazor.FontIcons.MaterialSymbols.Rounded.FormatH2" Color="Color.Inherit" /></MudTooltip>
                    <MudTooltip Text="粗体"><MudIconButton Icon="@MudBlazor.FontIcons.MaterialSymbols.Rounded.FormatBold" Color="Color.Inherit" /></MudTooltip>
                    <MudTooltip Text="斜体"><MudIconButton Icon="@MudBlazor.FontIcons.MaterialSymbols.Rounded.FormatItalic" Color="Color.Inherit" /></MudTooltip>
                    <MudTooltip Text="引用"><MudIconButton Icon="@MudBlazor.FontIcons.MaterialSymbols.Rounded.FormatQuote" Color="Color.Inherit" /></MudTooltip>
                    <MudTooltip Text="删除线"><MudIconButton Icon="@MudBlazor.FontIcons.MaterialSymbols.Rounded.FormatStrikethrough" Color="Color.Inherit" /></MudTooltip>
                    <MudTooltip Text="代码块"><MudIconButton Icon="@MudBlazor.FontIcons.MaterialSymbols.Rounded.CodeBlocks" Color="Color.Inherit" /></MudTooltip>
                    <div class="divider" />
                    <MudTooltip Text="图片"><MudIconButton Icon="@MudBlazor.FontIcons.MaterialSymbols.Rounded.Imagesmode" Color="Color.Inherit" /></MudTooltip>
                    <MudTooltip Text="链接"><MudIconButton Icon="@MudBlazor.FontIcons.MaterialSymbols.Rounded.Link" Color="Color.Inherit" /></MudTooltip>
                    <div class="divider" />
                    <MudTooltip Text="无序列表"><MudIconButton Icon="@MudBlazor.FontIcons.MaterialSymbols.Rounded.FormatListBulleted" Color="Color.Inherit" /></MudTooltip>
                    <MudTooltip Text="有序列表"><MudIconButton Icon="@MudBlazor.FontIcons.MaterialSymbols.Rounded.FormatListNumbered" Color="Color.Inherit" /></MudTooltip>
                    @if (!ShowPreview)
                    {
                        <MudSpacer />
                        <MudTooltip Text="预览"><MudIconButton OnClick="PreviewShowAndRefresh" Icon="@MudBlazor.FontIcons.MaterialSymbols.Rounded.Preview" Color="Color.Primary" /></MudTooltip>
                    }
                </MudToolBar>
            </MudPaper>
            <div id="monaco_editor" style="height: calc(100% - 104px); min-height: 600px;" />
            <MudPaper Elevation="20" Style="position: sticky; bottom: 0; right: 16px; left: 0;">
                <MudToolBar Style="height: 40px;">
                    <MudText>字数：114514</MudText>
                    <MudSpacer></MudSpacer>
                    <MudText>行：111 列：333</MudText>
                    <div class="divider" style="margin: 0 10px;" />
                    <MudText Style="margin-right: 5px;">空格：4</MudText>
                </MudToolBar>
            </MudPaper>
        </div>
    </MudItem>
    @if (ShowPreview)
    {
        <MudItem sm="12" md="6">
            <MarkdownPreview @ref="Preview" />
        </MudItem>
    }
    </MudGrid>
    <MudDrawer Width="80%" @bind-Open="@PreviewDrawerOpen" Anchor="@Anchor.Right" Elevation="1" Variant="@DrawerVariant.Temporary" OverlayAutoClose="true">
        <MarkdownPreview @ref="Preview" />
    </MudDrawer>
    <script src="vs/loader.js"></script>

    <script>
        var darkMode = true;
        require.config({ paths: { vs: 'vs' } });
        require.config({
            'vs/nls': {
                availableLanguages: {
                    '*': 'zh-cn'
                }
            }
        });
        var monacoEditor = {};
        var homePage = {}
        var editorLoaded = false
        function initEditor(blazorPageInstance) {
            homePage = blazorPageInstance
            require(['vs/editor/editor.main'], function () {
                var uri = monaco.Uri.parse('file://default.js');
                var model = monaco.editor.getModel(uri);
                if (!model)
                    model = monaco.editor.createModel('Hello world!', 'markdown', uri);

                monacoEditor = monaco.editor.create(document.getElementById('monaco_editor'), {
                    model: model,
                    theme: darkMode ? "vs-dark" : "vs-light",
                    automaticLayout: true,
                    minimap: { enabled: false },
                });

                const removableIds = ['editor.action.revealDefinition'
                    , 'editor.action.goToReferences'
                    , 'editor.action.quickOutline'
                    , 'submenuitem.EditorContextPeek'
                    , 'vs.actions.separator'
                    , 'editor.action.rename'
                    , 'editor.action.changeAll'
                    , 'editor.action.formatDocument'
                    , 'editor.action.quickCommand'];
                const contextmenu = monacoEditor.getContribution('editor.contrib.contextmenu');
                const realMethod = contextmenu._getMenuActions;
                contextmenu._getMenuActions = function () {
                    const items = realMethod.apply(contextmenu, arguments);

                    return items.filter(function (item) {
                        return !removableIds.includes(item.id);
                    });
                };

                monacoEditor.addAction({
                    id: 'select-all',
                    label: '全选',
                    contextMenuGroupId: 'navigation',
                    contextMenuOrder: 1.5,
                    run: function (ed) {
                        ed.setSelection(new monaco.Range(1, 1, ed.getModel().getLineCount(), ed.getModel().getLineMaxColumn(ed.getModel().getLineCount())));
                    }
                });

                monacoEditor.addAction({
                    id: 'disable-paste',
                    label: 'Disable Paste',
                    keybindings: [monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyV],
                    run: function () {
                        // Do nothing to disable the default paste action
                    }
                });

                // 添加自定义粘贴操作
                monacoEditor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyV, function () {
                    navigator.clipboard.readText().then(function (text) {
                        const modifiedText = text;

                        const selection = monacoEditor.getSelection();
                        monacoEditor.executeEdits("", [{
                            range: selection,
                            text: modifiedText,
                            forceMoveMarkers: true
                        }]);
                    });
                });

                monacoEditor.onDidChangeModelContent(async (event) => {
                    await homePage.invokeMethodAsync('NoticeMonacoEditorTextChanged');
                });
                editorLoaded = true
            });
        }


        function changeEditorTheme(v) {
            darkMode = v;
            monacoEditor.updateOptions({
                theme: darkMode ? "vs-dark" : "vs-light"
            })
        }

        function getModelValue() {
            const result = monacoEditor.getModel().getValue();
            console.log(result.length)
            return result;
        }

        function setModelValue(value) {
            return monacoEditor.getModel().setValue(value);
        }

    </script>
    <style>
        .divider {
            border: 1px solid;
            height: 50%;
            width: 2px;
            border-color: var(--mud-palette-divider);
        }
    </style>
@code {
    Guid IBrowserViewportObserver.Id { get; } = Guid.NewGuid();

    ResizeOptions IBrowserViewportObserver.ResizeOptions { get; } = new()
        {
            ReportRate = 250,
            NotifyOnBreakpointOnly = true
        };

    public bool ShowPreview { get; set; } = true;

    private MarkdownPreview Preview { get; set; }

    private bool PreviewDrawerOpen { get; set; }

    private DotNetObjectReference<Home>? PageInstance{ get; set; }

    private Debouncer Debouncer { get; set; } = new();

    protected override void OnInitialized()
    {
        PageInstance = DotNetObjectReference.Create(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Common.DarkThemeChanged += DarkThemeChanged;
            await JS.InvokeVoidAsync("initEditor", PageInstance);
            await BrowserViewportService.SubscribeAsync(this, fireImmediately: true);
        }
    }

    public async ValueTask DisposeAsync()
    {
        await BrowserViewportService.UnsubscribeAsync(this);
        Common.DarkThemeChanged -= DarkThemeChanged;
    }

    public async void DarkThemeChanged(bool darkTheme)
    {
        await JS.InvokeVoidAsync("changeEditorTheme", darkTheme);
        await Preview.ReloadFrame();
    }

    public async Task<string> GetModelValue()
    {
        var str = await JS.InvokeAsync<string>("getModelValue");
        return str;
    }

    public async void SetModelValue()
    {
        await JS.InvokeVoidAsync("setModelValue", "hello world.");
    }

    public async void PreviewShowAndRefresh()
    {
        if (!ShowPreview)
        {
            PreviewDrawerOpen = true;
        }
        await Preview.ReloadFrame();
    }

    Task IBrowserViewportObserver.NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs e)
    {
        ShowPreview = e.Breakpoint switch
        {
            Breakpoint.Lg => true,
            Breakpoint.Xl => true,
            _ => false
        };
        PreviewShowAndRefresh();
        return InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public void NoticeMonacoEditorTextChanged()
    {
        Debouncer.Debounce(async () =>
        {
            await Preview.ReloadFrame();
        }, 1000);
    }
}