@using HexoArticleEditor.Model
@inject IDialogService Dialog
@inject ISnackbar SnackBar

<div id="metaData" class="pa-4">
    <div style="display: flex; align-items: baseline;">
        <MudTextField T="string" Label="标题" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="MetaData.Title"></MudTextField>
        <MudButton Color="Color.Primary" OnClick="@OnSaveClicked">保存</MudButton>
    </div>
    <div class="d-flex flex-column align-center">
        <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="SwitchMetaDataDisplay">显示更多/更少</MudButton>
    </div>
    <MudDivider />
    <MudCollapse Expanded="MetaDataDisplay">
        <div class="pa-2">
            <div style="display:flex; align-items: baseline;">
                <MudText Style="margin-right: 10px; margin-bottom: 10px;">时间:</MudText>
                <MudButton Color="Color.Secondary" OnClick="ChangeTimeToNow">当前时刻</MudButton>
                <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="日期" @bind-Date="MetaData.CreateDate" />
                <MudTimePicker PickerVariant="PickerVariant.Dialog" Label="时间" TimeFormat="HH:mm:ss" @bind-Time="MetaData.CreateTime" />
            </div>
            <div style="display:flex; align-items: baseline; margin-top: 10px;">
                <MudText Style="margin-right: 10px; margin-bottom: 10px;">Tags:</MudText>
                <MudTextField T="string" @ref="TagTextField" Variant="Variant.Text" @bind-Value="TagInput" Label="输入Tag" Margin="Margin.None" OnKeyDown="OnTagInput"></MudTextField>
            </div>
            <MudChipSet T="string" AllClosable Style="margin-left: 45px;" OnClose="OnTagDeleted">
                @foreach (var tag in MetaData.Tags)
                {
                    <MudChip Color="Color.Secondary" Text="@tag"></MudChip>
                }
            </MudChipSet>
            <div style="display:flex; align-items: baseline; margin-top: 10px;">
                <MudText Style="margin-right: 10px; margin-bottom: 10px;">分类:</MudText>
                <MudTextField T="string" @ref="CategoryTextField" Variant="Variant.Text" @bind-Value="CategoryInput" Label="输入分类" Margin="Margin.None" OnKeyDown="OnCategoryInput"></MudTextField>
            </div>
            <MudChipSet T="string" AllClosable Style="margin-left: 45px;" OnClose="OnCategoryDeleted">
                @foreach (var categroy in MetaData.Categories)
                {
                    <MudChip Color="Color.Tertiary" Text="@categroy"></MudChip>
                }
            </MudChipSet>
            <div style="display:flex; align-items: flex-start; margin-top: 10px;">
                <MudText Style="margin-right: 10px; margin-bottom: 10px;">头图:</MudText>
                <MudImage onclick="@(() => OnHeadImageClicked())" Style="max-width: calc(100% - 50px); margin-top: 10px; cursor: pointer;" Src="@MetaData.Cover" Class="rounded-lg" />
            </div>
        </div>
    </MudCollapse>
</div>

<MudDialog @ref="UploadDialog">
    <DialogContent>
        <MudStack>
            <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" Accept=".png,.jpg,.bmp,.webp">
                <ActivatorContent>
                    <MudButton Color="Color.Primary">
                        上传图片
                        @if (UploadProgress > 0 || UploadProgress < 100)
                        {
                            <MudProgressCircular Size="Size.Small" Value="UploadProgress" Color="Color.Primary" Style="max-width: calc(100% - 40px); margin-top: 10px;"></MudProgressCircular>
                        }
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>
            @if (!string.IsNullOrEmpty(UploadImagePath))
            {
                <MudImage Src="@UploadImagePath" Class="rounded-lg"></MudImage>
            }
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Secondary" OnClick="@(() => CloseDialog(false))">关闭</MudButton>
        <MudButton Color="Color.Primary" OnClick="@(() => CloseDialog(true))">保存</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private MetaData _metaData = new();

    [Parameter]
    public MetaData MetaData
    {
        get => _metaData;

        set
        {
            if(value == null)
            {
                return;
            }
            _metaData = value;
            StateHasChanged();
        }
    }

    [Parameter]
    public EventCallback OnMetaDataSaved { get; set; }

    private bool MetaDataDisplay { get; set; } = false;

    private IList<IBrowserFile> _files = new List<IBrowserFile>();

    private MudDialog UploadDialog { get; set; }

    private string TagInput { get; set; }

    private string CategoryInput { get; set; }

    private MudTextField<string> TagTextField { get; set; }

    private MudTextField<string> CategoryTextField { get; set; }

    private double UploadProgress { get; set; }

    private string UploadImagePath { get; set; } = "";

    public MetaData GetMetaData()
    {
        return MetaData;
    }

    private void SwitchMetaDataDisplay()
    {
        MetaDataDisplay = !MetaDataDisplay;
    }

    private async void OnHeadImageClicked()
    {
        UploadImagePath = MetaData.Cover;
        await UploadDialog.ShowAsync("修改头图", new DialogOptions
        {
            FullWidth = true,
            BackdropClick = false,
            CloseOnEscapeKey = false,
        });
    }

    private async void OnSaveClicked()
    {
        await OnMetaDataSaved.InvokeAsync();
    }

    private async void CloseDialog(bool result)
    {
        await UploadDialog.CloseAsync(result ? DialogResult.Ok(true) : DialogResult.Cancel());
        if (result)
        {
            MetaData.Cover = UploadImagePath;
        }
    }

    private async Task UploadFiles(IBrowserFile upload)
    {
        _files.Add(upload);
        try
        {
            if (upload == null)
            {
                return;
            }
            UploadImagePath = "";
            var date = DateTime.Now;
            string path = Path.Combine(AppConfig.HexoImagePath, date.Year.ToString(), date.Month.ToString());
            Directory.CreateDirectory(path);
            string fileName = upload.Name;
            if (!AppConfig.UseUploadFileName)
            {
                fileName = DateTime.Now.ToString("yyyyMMddHHmmss") + Path.GetExtension(fileName);
            }
            if (fileName.StartsWith("."))
            {
                fileName = DateTime.Now.ToString("yyyyMMddHHmmss") + fileName;
            }

            await using FileStream writeStream = new(Path.Combine(path, fileName), FileMode.OpenOrCreate);

            using var readStream = upload.OpenReadStream(AppConfig.MaxFileSize);
            var bytesRead = 0;
            var totalRead = 0;
            var buffer = new byte[1024 * 10];

            while ((bytesRead = await readStream.ReadAsync(buffer)) != 0)
            {
                totalRead += bytesRead;
                await writeStream.WriteAsync(buffer, 0, bytesRead);
                UploadProgress = (totalRead / upload.Size) * 100;
                await Task.Delay(100);
                StateHasChanged();
            }
            SnackBar.Add("图片上传成功", Severity.Success);
            UploadImagePath = Path.GetRelativePath(Path.Combine(AppConfig.HexoBasePath, "public"), Path.Combine(path, fileName)).Replace('\\', '/');
        }
        catch (Exception e)
        {
            SnackBar.Add("上传图片失败，信息: " + e.Message, Severity.Error);
        }
        finally
        {
            UploadProgress = 0;
            StateHasChanged();
        }
    }

    private void OnTagDeleted(MudChip<string> chip)
    {
        MetaData.Tags.Remove(chip?.Text);
        StateHasChanged();
    }

    private void OnCategoryDeleted(MudChip<string> chip)
    {
        MetaData.Categories.Remove(chip?.Text);
        StateHasChanged();
    }

    private async void OnTagInput(KeyboardEventArgs e)
    {
        if (e.Code.ToLower().Contains("enter"))
        {
            await TagTextField.BlurAsync();
            if (string.IsNullOrEmpty(TagInput))
            {
                return;
            }
            if (MetaData.Tags.Any(x => x == TagInput))
            {
                SnackBar.Add("Tag 重复添加", Severity.Warning);
                return;
            }
            else
            {
                MetaData.Tags.Add(TagInput);
                TagInput = "";

                await TagTextField.SetText("");
                await TagTextField.FocusAsync();
                StateHasChanged();
            }
        }
    }

    private async void OnCategoryInput(KeyboardEventArgs e)
    {
        if (e.Code.ToLower().Contains("enter"))
        {
            await CategoryTextField.BlurAsync();
            if (string.IsNullOrEmpty(CategoryInput))
            {
                return;
            }
            if (MetaData.Categories.Any(x => x == CategoryInput))
            {
                SnackBar.Add("分类重复添加", Severity.Warning);
                return;
            }
            else
            {
                MetaData.Categories.Add(CategoryInput);
                CategoryInput = "";

                await CategoryTextField.SetText("");
                await CategoryTextField.FocusAsync();
                StateHasChanged();
            }
        }
    }

    private void ChangeTimeToNow()
    {
        MetaData.CreateDate = DateTime.Now;
        MetaData.CreateTime = new TimeSpan(DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Second);
    }
}